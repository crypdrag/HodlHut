// MyHut Service Interface
// Individual user canister for swaps and balances

type AssetType = variant {
  ICP;
  ckBTC;
  ckETH;
  ckUSDC;
  ckUSDT;
  BTC;
  ETH;
  USDC;
  USDT;
};

type SwapRequest = record {
  from_asset: AssetType;
  to_asset: AssetType;
  amount: nat64;
  slippage: float64;
  dex_preference: opt text;
  urgency: variant { low; medium; high };
  max_fee_usd: opt float64;
};

type SwapRoute = record {
  dex_used: text;
  steps: vec text;
  estimated_time: text;
  complexity: text;
};

type SwapResponse = record {
  success: bool;
  transaction_id: opt text;
  output_amount: opt nat64;
  actual_fee_usd: opt float64;
  execution_time: opt int;
  error_message: opt text;
  route: opt SwapRoute;
};

type BalanceEntry = record {
  asset: AssetType;
  balance: nat64;
  balance_usd: float64;
  last_updated: int;
};

service myhut : {
  // Initialization
  initialize: (principal) -> (variant { Ok: text; Err: text });

  // Swap execution
  execute_swap: (SwapRequest) -> (SwapResponse);

  // Balance queries
  get_balance: () -> (vec BalanceEntry) query;
  get_asset_balance: (AssetType) -> (opt BalanceEntry) query;

  // Status
  get_owner: () -> (opt principal) query;
  is_initialized: () -> (bool) query;
}