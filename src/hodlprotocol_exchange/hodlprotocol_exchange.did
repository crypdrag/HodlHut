// ============================
// TYPE DEFINITIONS
// ============================

// REE Interface Types (from ree_types::exchange_interfaces)
type CoinBalance = record {
  id : text;
  value : nat;
};

type Utxo = record {
  txid : text;
  vout : nat32;
  sats : nat64;
  coins : vec CoinBalance;
};

type InputCoin = record {
  from : text;
  coin : CoinBalance;
};

type OutputCoin = record {
  to : text;
  coin : CoinBalance;
};

type Intention = record {
  exchange_id : text;
  action : text;
  action_params : text;
  pool_address : text;
  nonce : nat64;
  pool_utxo_spent : vec text;
  pool_utxo_received : vec Utxo;
  input_coins : vec InputCoin;
  output_coins : vec OutputCoin;
};

type IntentionSet = record {
  initiator_address : text;
  tx_fee_in_sats : nat64;
  intentions : vec Intention;
};

type ExecuteTxArgs = record {
  psbt_hex : text;
  txid : text;
  intention_set : IntentionSet;
  intention_index : nat32;
  zero_confirmed_tx_queue_length : nat32;
};

type NewBlockInfo = record {
  block_height : nat32;
  block_hash : text;
  block_timestamp : nat64;
  confirmed_txids : vec text;
};

type RollbackTxArgs = record {
  txid : text;
};

type GetMinimalTxValueArgs = record {
  pool_address : text;
  zero_confirmed_tx_queue_length : nat32;
};

type PoolBasic = record {
  name : text;
  address : text;
};

type PoolInfo = record {
  key : text;                      // Pubkey serialized as text (REE convention)
  name : text;
  address : text;
  btc_reserved : nat64;
  key_derivation_path : vec blob;
  coin_reserved : vec CoinBalance;
  attributes : text;
  nonce : nat64;
  utxos : vec Utxo;
};

type GetPoolInfoArgs = record {
  pool_address : text;
};

type PoolConfig = record {
  address : text;
  pubkey : opt blob;              // Untweaked public key (for REE signing)
  tweaked : opt blob;             // Tweaked public key (Taproot)
  finality_provider : text;
  timelock_blocks : nat32;
  blst_rune_id : opt text;
  total_deposited_sats : nat64;
  total_blst_minted : nat64;
  created_at : nat64;
};

type DepositOffer = record {
  pool_address : text;
  nonce : nat64;
  expected_blst : nat64;
  protocol_fee : nat64;
  estimated_apy : float64;
  pool_utxo_txid : text;
  pool_utxo_vout : nat32;
  pool_utxo_amount_sats : nat64;
  pool_utxo_blst_amount : nat64;
};

type PoolStats = record {
  pool_address : text;
  tvl_sats : nat64;
  total_blst_minted : nat64;
  finality_provider : text;
  timelock_blocks : nat32;
  estimated_apy : float64;
};

type ExecutionResult = record {
  status : text;
  tx_hash : text;
  amount_sats : nat64;
  from_address : text;
  to_address : text;
  nonce : nat64;
  confirmations : nat32;
};

type BabylonParams = record {
  unbonding_time_seconds : nat64;
  max_validators : nat32;
  min_commission_rate : text;
  bond_denom : text;
  last_updated : nat64;
};

type FPDescription = record {
  moniker : text;
  identity : text;
  website : text;
  details : text;
};

type FinalityProvider = record {
  btc_pk_hex : text;
  description : FPDescription;
  commission : text;
  voting_power : text;
  estimated_apy : float64;
};

type Result = variant {
  Ok : text;
  Err : text;
};

type Result_1 = variant {
  Ok : DepositOffer;
  Err : text;
};

type Result_2 = variant {
  Ok : PoolStats;
  Err : text;
};

type Result_3 = variant {
  Ok : BabylonParams;
  Err : text;
};

type Result_4 = variant {
  Ok : vec FinalityProvider;
  Err : text;
};

type Result_5 = variant {
  Ok;
  Err : text;
};

// Step 3-4: Babylon Staking & Omnity Hub types
type BabylonStakingRecord = record {
  staking_tx_hash : text;
  amount_sats : nat64;
  timelock_blocks : nat32;
  finality_provider : text;
  covenant_pks : vec text;
  covenant_quorum : nat32;
  babylon_delegated : bool;
  delegation_ticket_id : opt text;
  delegation_timestamp : opt nat64;
  accrued_baby_rewards : nat64;
  last_reward_claim : opt nat64;
  created_at : nat64;
  confirmed_height : opt nat64;
};

type BabylonStakingStats = record {
  total_staked_to_babylon : nat64;
  active_delegations : nat32;
  total_baby_rewards : nat64;
  pending_babylon_txs : nat32;
};

// ============================
// SERVICE INTERFACE
// ============================

service : {
  // Pool management
  "init_pool" : () -> (Result);
  "update_pool_pubkeys" : () -> (Result);
  "update_pool_rune_id" : (text) -> (Result);
  "get_pool_config" : () -> (opt PoolConfig) query;
  "get_pool_stats" : () -> (Result_2) query;

  // REE Interface (Required for REE Orchestrator)
  "get_pool_list" : () -> (vec PoolBasic) query;
  "get_pool_info" : (GetPoolInfoArgs) -> (opt PoolInfo) query;

  // Rune operations (BABYLONâ€¢LST token)
  "etch_blst_rune" : () -> (Result);

  // Deposit flow
  "pre_deposit" : (text, nat64) -> (Result_1);
  "get_blst_balance" : (text) -> (nat64) query;

  // REE Orchestrator callbacks
  "execute_tx" : (ExecuteTxArgs) -> (Result);
  "new_block" : (NewBlockInfo) -> (Result_5);
  "rollback_tx" : (RollbackTxArgs) -> (Result_5);

  // Babylon integration
  "get_babylon_params" : () -> (Result_3);
  "get_finality_providers" : () -> (Result_4);

  // Step 3: Babylon Staking (Pool-level)
  "stake_pool_to_babylon" : (nat64) -> (Result);
  "get_babylon_staking_stats" : () -> (BabylonStakingStats) query;
  "get_babylon_staking_record" : (text) -> (opt BabylonStakingRecord) query;

  // Step 4: Omnity Hub Delegation
  "submit_babylon_delegation" : (text) -> (Result);
  "check_delegation_status" : (text) -> (Result);
}
